# NOM DU FICHIER: myfirstappSlider.py
#% IMPORTATION
from PyQt5.QtWidgets import (QApplication, QMainWindow, QLabel,
                             QPushButton, QSpinBox, QSlider)
from PyQt5.QtCore import pyqtSlot, Qt


class MainWindow(QMainWindow):
    '''
    DOCUMENTATION
    -------------
    Créer une fenêtre (300x200 pixels)
    '''
    def __init__(self):
        '''
        INITIALISEUR
        ------------
        La classe `MainWindow()` rendre une fenêtre (300x200 pixels)
        avec un titre 'My first app'.
        '''
        super(MainWindow, self).__init__()
        # GUI proprieties
        self.setGeometry(400, 100, 300, 200)
        self.setWindowTitle('My first app')
        # Ajouter des étiquettes: QLabel
        ## Label 1: Texte brut
        self.label1 = QLabel('Ma première application affiche: ', self)
        # fixer la largeur de l'étiquette
        self.label1.setFixedWidth(190)
        # position de l'étiquette (x, y) en pixels
        self.label1.move(10, 10)
        ## Label 2: Texte riche
        self.label2 = QLabel("", self)
        # créer un message HTML
        message = "<h3><b><font color='green'>Bonjour IE3!</font></b>"
        # ajouter le text du message
        self.label2.setText(message)
        # fixer la largeur de l'étiquette
        self.label2.setFixedWidth(120)
         # position de l'étiquette (x, y) en pixels
        self.label2.move(200, 10)

        # Ajouter des boutons: `QPushButton`
        # Push Button 1: Bouton bonjour
        button1 = QPushButton('Bonjour', self)
        button1.setToolTip("C'est le bouton Bonjour")
        button1.move(50, 50)
        # connecter le signal à l'événement
        button1.clicked.connect(self.on_click_button1)
        # Push Button 2: Bouton au revoir
        button2 = QPushButton('Au revoir', self)
        button2.setToolTip("C'est le bouton Au revoir")
        button2.move(170, 50)
        # connecter le signal à l'événement
        button2.clicked.connect(self.on_click_button2)

        # Ajouter des Spin Box: QSpinBox
        self.spb = QSpinBox(self)
        # Spin Box changer une valeur entière de 0 à 100
        self.spb.setMinimum(0)
        self.spb.setMaximum(100)
        self.spb.setValue(50) # valeur par défaut
        self.spb.setSingleStep(1) # pas
        # définir la géométrie (x, y, largeur, hauteur) en pixels
        self.spb.setGeometry(120, 100, 50, 20)
        # connecter le signal à l'événement
        self.spb.valueChanged.connect(self.spb_valuechange)
        # définir une étiquette disant à quoi Spin Box fait référence
        txt = QLabel('La valeur actuelle est: ', self)
        # définir la géométrie (x, y, largeur, hauteur) en pixels
        txt.setGeometry(10, 100, 100, 20)
        # définir une étiquette pour recevoir une valeur du spin box
        self.val = QLabel("", self)
        # définir la géométrie (x, y, largeur, hauteur) en pixels
        self.val.setGeometry(190, 100, 30, 20)

        # Slider: Slider change integer value from 0 to 100
        self.sldr = QSlider(Qt.Horizontal, self)
        self.sldr.setMinimum(0)
        self.sldr.setMaximum(100)
        self.sldr.setValue(50)
        self.sldr.setSingleStep(1)
        # set geometry (x,y,width,hight)
        self.sldr.setGeometry(10, 150, 280, 20)
        self.sldr.valueChanged.connect(self.sldr_valuechange)

    @pyqtSlot()  # signal du bouton bonjour
    def on_click_button1(self):
        '''
        Afficher un message "Bonjour"
        '''
        message = "<h3><b><font color='green'>Bonjour IE3!</font></b>"
        self.label2.setText(message)
        self.label2.setFixedWidth(120)

    @pyqtSlot()  # signal du bouton au revoir
    def on_click_button2(self):
        '''
        Afficher un message "Au revoir"
        '''
        message = "<h3><b><font color='red'>Au revoir IE3!</font></b>"
        self.label2.setText(message)
        self.label2.setFixedWidth(120)

    @pyqtSlot(int)  # signal du Spin Box: renvoie un entier
    def spb_valuechange(self, value):
        '''
        la valeur du Spin Box est un entier,
        convertissez-le en chaîne à l'aide de la fonction str().
        '''
        self.val.setText(str(self.spb.value()))
        # connecter le curseur au Spin Box
        self.sldr.setValue(value)

    @pyqtSlot(int)  # signal du curseur
    def sldr_valuechange(self, value):
        '''
        connecter le Spin Box au curseur
        '''
        self.spb.setValue(value)


if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    MyApplication = MainWindow()
    MyApplication.show()
    sys.exit(app.exec_())
