TITLE: Développer des applications de bureau avec Python et Qt
AUTHOR: Ahmed Ammar {copyright|CC BY} Email:ahmed.ammar@fst.utm.tn at Faculté des Sciences de Tunis, Université de Tunis El Manar.
DATE: today

TOC: on

!split
======= Introduction =======
Dans ce chapitre, nous allons passer à la création d’applications graphiques. De telles applications permettent de modifier l'apparence d'un programme en utilisant des _éléments de contrôle_ tels que des _widgets_, des _boutons_, des _curseurs_, etc.

_PyQt5_ (URL:"https://www.riverbankcomputing.com/software/pyqt/intro") est une boîte à outils de widgets d' interface graphique (en anglais _GUI_ pour *Graphical User Interface*) combinant le langage de programmation Python et le logiciel _Qt5_ (URL:"https://www.qt.io"). PyQt5 est une bibliothèque d'interface graphique populaire qui présente de nombreux avantages par rapport aux autres bibliothèques d'interface graphique telles que *Tkinter* et *wx*. Ceux-ci inclus:

* Bibliothèque d'interface graphique multi-plateforme (Windows, MacOS, Linux).
* Bonne performance.
* Prise en charge des styles personnalisés.
* Plus de bibliothèques pour la conception d'interface graphique complexe.
* Facilité d'utilisation.

======= Premières étapes pour la création d'une application graphique à l'aide de PyQt5 =======

===== Importation de PyQt5 et création d'une "fenêtre PyQt5" =====

Passons directement à l'action et apprenons à créer une fenêtre simple avec PyQt5. Premièrement, nous devrons importer certains modules essentiels à l’exécution d’une interface graphique avec PyQt5. Nous commençons par _importer_ quelques sous-modules de PyQt5.

!bc pycod-t
from PyQt5.QtWidgets import QApplication, QWidget
!ec
!bnotice
`QtWidgets` est l'un des nombreux composants de PyQt5. Certains des plus couramment utilisés sont énumérés ci-dessous:
* `QtWidgets`: Contient des classes qui fournissent un ensemble d'éléments pour créer une interface graphique classique de type bureau.
* `QtCore`: Ce module contient les classes principales, y compris la boucle d'événement et les mécanismes `signal` et `slot` de Qt.
* `QtGui`: Celui-ci contient des classes pour l’intégration du système de fenêtrage, la gestion des événements, les graphiques 2D, les images de base, les polices et le texte.
* `QtDesigner`: Ce module contient des classes permettant l'extension de *Qt Designer* à l'aide de PyQt5.
* `uic`: Ce module contient des classes permettant de gérer les fichiers _.ui_ créés par Qt Designer décrivant l’ensemble ou une partie d’une interface graphique.
* etc.
!enotice

Ensuite, nous importons le module `sys` car nous voulons accéder aux arguments de ligne de commande. Ceux-ci sont contenus dans la liste `sys.argv

!bc pycod
import sys
app = QApplication(sys.argv)
!ec

En utilisant les arguments de ligne de commande contenus dans `sys.argv`, nous devrions créer un objet `QApplication`. Dans l'exemple ci-dessus, nous avons enregistré cet objet sous le nom _app_. Ceci est l'objet *exécuté* lorsque nous exécutons à l'invite de commande la commande `python filename.py` où _filename.py_ est le fichier dans lequel les instructions sont stockées. Cet objet contiendra tous les éléments de l'interface graphique et leurs méthodes. Par conséquent, lorsque cet objet est créé et *exécuté*, nous avons accès à toutes les interfaces graphiques utilisées dans le programme. Les éléments de l'interface graphique sont hérités de la classe `QWidgets`. Nous obtenons donc un objet `QWidget` comme indiqué ci-dessous.
!bc pycod
window = QWidget()
!ec
En utilisant les nombreuses méthodes *set*, nous pouvons définir les valeurs des différents attributs de cet objet *window*. Nous allons d’abord définir les dimensions de la fenêtre en utilisant la méthode `setGeometry`. Il prend quatre paramètres: _x_ coordonnée du point le plus à gauche de l'objet (*window*), _y_ coordonnée du point le plus haut, _la largeur_ et _la hauteur_ de la fenêtre, dans cet ordre. Toutes ces valeurs doivent être des entiers référencés par rapport aux coordonnées d'écran natives. Par exemple, nous pourrions écrire:

!bc pycod
window.setGeometry(400, 100, 300, 200)
!ec
Cela définirait la fenêtre avec une largeur de 300 pixels et une hauteur de 200 pixels à 400 pixels du côté gauche et à 100 pixels du haut de l'écran natif (écran de votre ordinateur).

Nous pouvons définir un titre pour la fenêtre. Par exemple:

!bc pycod
window.setWindowTitle('My first app')
!ec
afficherait *My first app* dans la barre de titre de la fenêtre.

Une fois que nous sommes satisfaits de l'interface graphique que nous avons construite, nous appelons:
!bc pycod
window.show()
!ec

pour afficher l'objet graphique dans *l'application* que nous avons créée. Cependant, l'application n'est toujours pas exécutée. Pour exécuter l'application, nous exécutons la commande:
!bc pycod-t
app.exec()
!ec
La méthode `.show ()` est une méthode QT qui ouvre la fenêtre à l'écran pour l'utilisateur.

Enfin, pour assurer une fermeture agréable et propre de l'application lorsque nous quittons:
!bc pycod
sys.exit(app.exec_())
!ec
Le code complet de cette application est donné ci-dessous et le résultat est illustré à la Figure ref{fig:myfirstapp}. Le code peut être stocké dans un fichier, par exemple _myfirstapp.py_, puis lorsque vous exécutez la commande `python MyFirstApp.py` à l'invite de commande (ou dans Spyder), vous obtenez la fenêtre de sortie affichée.

@@@CODE scripts/myfirstapp.py

FIGURE: [imgs/myfirstapp, width=300 frac=0.4] Une fenêtre PyQt5 créée par le code `myfirstapp.py` et également par le code `myfirstappStructure.py`. label{fig:myfirstapp}

===== Structure d'application PyQT =====

Les étapes suivantes (dont certaines ont déjà été utilisées dans l'exemple ci-dessus) aideront à créer une structure solide et propre pour toute application développée avec PyQt:

o Importer les modules nécessaires.
o Créer une classe héritée de `QMainWindow` (à l'aide de la construction `class MainWindow(QMainWindow):`). La `QMainWindow` est une classe Qt qui fournit une fenêtre principale de l’application avec toutes les options (telle que la barre de menus, la barre d’état, etc.).
o Implémentez le _constructeur_ (également appelé _l'initialiseur_) de la classe en utilisant la méthode `__init __ ()`. Chaque fois qu'un objet d'une classe est créé, cette méthode sera exécutée. L'initialiseur commence généralement par un appel à l'initialiseur de la classe `super ()`; Ainsi, toutes les méthodes définies dans la classe parent sont immédiatement disponibles, même si elles sont remplacées dans la définition de classe actuelle.
o Cette opération est ensuite suivie par la définition des valeurs (par défaut) pour divers attributs, tels que la géométrie, le titre, etc., et la définition des différentes méthodes.
o Enfin, utiliser la construction `if __name__ == "__main __":` à la fin pour créer un objet `QApplication` et l'exécuter.

La fenêtre illustrée à la Figure ref{fig:myfirstapp} peut également être créée à l'aide des étapes décrites ci-dessus. Le code permettant de faire cela est donné dans le script _myfirstappStructure.py_. Dans une fenêtre d'invite de commande, exécutez la commande `python myfirstappStructure.py` (ou exécutez le script sur Spyder), où _myfirstappStructure.py_ est le nom du fichier contenant le code permettant d'afficher la fenêtre illustrée à la Figure ref{fig:myfirstapp}.

@@@CODE scripts/myfirstappStructure.py

===== Widgets, événements et signaux =====
Les widgets sont les éléments de base d'une interface graphique. PyQt5 a une large gamme de widgets, y compris des boutons (`buttons`), des étiquettes (`labels`), des cases à cocher (`check boxes`), des curseurs (`sliders`), des zones de liste (`list boxes`), etc. Nous décrirons plusieurs widgets couramment utilisés dans cette section. Ceux-ci incluent un `QPushButton`, un `ToggleButton`, un `QLabel`, un `QCheckBox`, un `QSlider`, un `QProgressBar`, un `QCalendarWidget`, etc.

=== Ajouter des étiquettes: `QLabel` ===
Nous avons besoin d'une étiquette pour afficher les messages. Un `QLabel` peut afficher du texte brut ou riche, HTML. Le code présenté ci-dessous (_myfirstappLabels.py_) ajouterait deux objets `QLabel` à la même fenêtre que celle précédemment créée. Le premier affiche un texte brut (`"Ma première application affiche: "`) et le second un texte HTML enrichi ("Bonjour IE3!", Gras et de couleur verte). L'exécution du code produira une fenêtre illustrée à la Figure ref{fig:myfirstappLabels}.
@@@CODE scripts/myfirstappLabels.py

FIGURE: [imgs/myfirstappLabels, width=300 frac=0.4] Résultat de l'exécution du code `myfirstappLabels.py`. label{fig:myfirstappLabels}

=== Ajouter des boutons: `QPushButton` ===
La plupart des interfaces graphiques sont utilisées pour prendre les entrées de l'utilisateur et produire des sorties en fonction de l'entrée donnée. Une technique courante consiste à demander à l'utilisateur de cliquer sur un bouton `OK` ou sur un bouton `Annuler`. Dans PyQt5, cela est implémenté à l'aide de la classe `QPushButton`. Chaque widget d'une application peut être programmé pour répondre de manière prédéterminée à tout changement survenant dans la fenêtre de l'application ou n'importe où sur l'ordinateur. Ces *changements* sont appelés _des événements_. Par exemple, nous pourrions déplacer la souris autour de l'écran ou sur la fenêtre de l'application, ou peut-être avons-nous appuyé sur la touche `Entrée`. Lorsqu'un tel événement se produit, le système émet un ou plusieurs signaux; autrement dit, modifie certaines propriétés des widgets. Nous pouvons écrire du code qui sera exécuté à chaque fois qu'un tel signal est émis. Ce morceau de code s'appelle un _slot_. Par exemple, nous pouvons souhaiter fermer la fenêtre et quitter l’application lorsque le bouton gauche d’une souris est cliqué sur le bouton de commande `Annuler`. Lorsque cet événement de clic gauche de la souris sur le bouton `Annuler` se produit, un signal de _clicked_ est émis sur le bouton et un _slot_ qui quitte l'application et quitte sera implémenté. Cependant, pour que cela se produise, nous devons explicitement _connecter_ le _slot_ au signal. Toutes ces idées sont montrées dans le code _myfirstappButtons.py_.

@@@CODE scripts/myfirstappButtons.py

FIGURE: [imgs/myfirstappButtons, width=600 frac=0.4] Résultat de l'exécution du code `myfirstappButtons.py`. label{fig:myfirstappButtons}

Toute méthode peut être connectée à un signal. Cependant, pour être sûr, il est préférable de s’assurer qu’une méthode particulière est bien un _slot_. Ceci est réalisé en déclarant une méthode comme étant un slot en utilisant le décorateur `@pyqtSlot()` comme indiqué dans le code _myfirstappButtons.py_.

=== Ajouter des Spin Box: `QSpinBox` ===
Les Spin Box sont des widgets utilisés pour accepter et afficher des nombres entiers. Celles-ci peuvent être considérées comme une boîte d'édition avec une molette attachée. En cliquant une fois sur une flèche vers le haut de la molette, la valeur dans la zone d'édition augmente d'un point; cliquer sur la flèche vers le bas diminuera la valeur de un. Vous pouvez également entrer la valeur directement dans la zone d'édition. La plage de valeurs accessible dans un spinbox peut être définie à l'aide de la méthode `setRange()` ou de la combinaison des méthodes `setMinimum()` et `setMaximum()`. Toutes ces idées sont montrées dans le code _myfirstappSpinBox.py_ et illustrées par la Figure ref{fig:myfirstappSpinBox}.

@@@CODE scripts/myfirstappSpinBox.py

FIGURE: [imgs/myfirstappSpinBox, width=600 frac=0.4] Résultat de l'exécution du code `myfirstappSpinBox.py`. label{fig:myfirstappSpinBox}

=== Ajouter des curseurs : `QSlider` ===
Un QSlider est un widget doté d'une poignée simple. Cette poignée peut être déplacée d'avant en arrière. En utilisant cela, nous pouvons choisir une valeur pour une tâche spécifique. Comme le Spin Box, un curseur ne peut avoir qu'une valeur entière; la plage des valeurs peut être définie entre un minimum et un maximum. Parfois, l’utilisation d’un curseur est plus naturelle que celle d’un Spin Box et cela dépend de la tâche ou de l’application.

@@@CODE scripts/myfirstappSlider.py

FIGURE: [imgs/myfirstappSlider, width=600 frac=0.4] Résultat de l'exécution du code `myfirstappSlider.py`. label{fig:myfirstappSlider}

======= Le concepteur Qt: "Qt Designer" =======
Le paquet PyQt est livré avec un outil de générateur d'interface graphique appelé Qt Designer (ou concepteur Qt). Qt Designer est l’outil Qt permettant de concevoir et de construire des interfaces graphiques à l’aide d’une simple approche _glisser-déposer_. Il vous permet de concevoir des widgets, des boîtes de dialogue ou des fenêtres principales complètes à l'aide de formulaires à l'écran (en anglais appelés: on-screen forms). Il a la possibilité de prévisualiser les conceptions pour s'assurer que l'interface graphique fonctionne comme prévu. Il permet une interface de prototypage avant qu’un code ne soit écrit.

Qt Designer peut être démarré en tapant `designer` dans la fenêtre d'invite de commande sous Windows ou sur un terminal sous n'importe quel système Linux. Sur un Mac, double-cliquez sur l'application Qt Desginer dans le répertoire "anaconda3 / bin" pour lancer Qt Designer. Une fois démarré, Qt Designer ressemblera à celui illustré à la figure ref{fig:designerNew}.

La création d’une interface graphique à l’aide de Qt Designer commence par la sélection d’une fenêtre de niveau supérieur pour l’application. Dans un premier temps, Qt Designer affiche une boîte de dialogue d’initialisation dans laquelle vous pouvez choisir le type de base de l’interface graphique que vous souhaitez créer. Vous avez la possibilité de choisir entre trois types de formulaires: _Dialog_, _Main Window_ et _Widget_.

FIGURE: [imgs/designerNew, width=400 frac=0.7] Dialogue d'initialisation du concepteur Qt. label{fig:designerNew}

Une fois que le type de formulaire requis est sélectionné et créé (en cliquant sur le bouton _Create_), il peut être redimensionné pour répondre aux besoins de l'application et tous les widgets peuvent être placés dessus.

===== La fenêtre du concepteur Qt =====
Par défaut, à gauche du formulaire se trouve un panneau appelé la *Boîte à widgets* (Widget Box) qui contient tous les objets Qt regroupés sous différentes catégories. Sur la droite, de nombreux panneaux tels que *l'inspecteur d'objets* (Object Inspector), *l'éditeur de propriétés* (Property Editor), etc.

FIGURE: [imgs/designerWindow, width=700 frac=0.9] La fenêtre du concepteur Qt. label{fig:designerWindow}

===== L'éditeur de propriété =====

Nous pouvons choisir le widget souhaité dans la _Boîte des widgets_, le faire glisser et le déposer sur le formulaire Qt, puis modifier ses propriétés à l'aide de _l'éditeur de propriétés_. Par exemple, faisons glisser deux widgets de la catégorie _Display Widgets_  dans la Boîte des widgets. Chaque widget a la propriété commune appelée _objectName_ dont les valeurs peuvent être définies dans l'éditeur de propriétés. Par exemple, dans notre cas, `label` et `label_2` sont les objectName par défaut des deux labels ajouté à l'interface que nous allons changé par `label1` et `label2` respectivement. On peut changer le texte de ces labels en cliquant deux fois sur le texte par défaut ou en cliquant sur `<Bouton droite Modifier texte simple/texte riche>`. La vidéo ci dessous illustre les étape de création de l'interface graphique "My first app" avec le concepteur Qt.
!bnotice
Une fois que tous les widgets sont définis dans la position souhaitée et que les valeurs des différentes propriétés de tous les widgets sont définies, nous pouvons examiner comment la fenêtre de l'interface graphique ressemblerait par prévisualisation. Cela se fait en tapant `<Ctrl + R>` sur le clavier.
!enotice
FIGURE: [imgs/myfirstappDesigner, width=400 frac=0.4] Interface graphique créée par le concepteur Qt. label{fig:myfirstappDesigner}
